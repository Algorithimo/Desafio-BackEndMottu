// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotorcycleRental.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MotorcycleRental.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MotorcycleRental.Domain.Entities.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("CNHImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("CNHType")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Identifier")
                        .IsUnique()
                        .HasDatabaseName("IX_Drivers_Identifier");

                    b.ToTable("Drivers", (string)null);
                });

            modelBuilder.Entity("MotorcycleRental.Domain.Entities.Motorcycle", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Identifier")
                        .HasDatabaseName("IX_Motorcycles_Identifier");

                    b.ToTable("Motorcycles", (string)null);
                });

            modelBuilder.Entity("MotorcycleRental.Domain.Entities.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("AdditionalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DailyRate")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("FinalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<Guid>("MotorcycleId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("PenaltyAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Plan")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Rentals_Status");

                    b.HasIndex("DriverId", "Status")
                        .HasDatabaseName("IX_Rentals_DriverId_Status");

                    b.HasIndex("MotorcycleId", "Status")
                        .HasDatabaseName("IX_Rentals_MotorcycleId_Status");

                    b.ToTable("Rentals", (string)null);
                });

            modelBuilder.Entity("MotorcycleRental.Domain.Events.MotorcycleEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("MotorcycleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProcessedAt")
                        .HasDatabaseName("IX_MotorcycleEvents_ProcessedAt");

                    b.HasIndex("Year")
                        .HasDatabaseName("IX_MotorcycleEvents_Year");

                    b.HasIndex("Year", "ProcessedAt")
                        .HasDatabaseName("IX_MotorcycleEvents_Year_ProcessedAt");

                    b.ToTable("MotorcycleEvents", (string)null);
                });

            modelBuilder.Entity("MotorcycleRental.Domain.Entities.Driver", b =>
                {
                    b.OwnsOne("MotorcycleRental.Domain.ValueObjects.CNH", "CNH", b1 =>
                        {
                            b1.Property<Guid>("DriverId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("character varying(11)")
                                .HasColumnName("CNHNumber");

                            b1.HasKey("DriverId");

                            b1.HasIndex("Number")
                                .IsUnique()
                                .HasDatabaseName("IX_Drivers_CNH");

                            b1.ToTable("Drivers");

                            b1.WithOwner()
                                .HasForeignKey("DriverId");
                        });

                    b.OwnsOne("MotorcycleRental.Domain.ValueObjects.CNPJ", "CNPJ", b1 =>
                        {
                            b1.Property<Guid>("DriverId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("character varying(14)")
                                .HasColumnName("CNPJ");

                            b1.HasKey("DriverId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_Drivers_CNPJ");

                            b1.ToTable("Drivers");

                            b1.WithOwner()
                                .HasForeignKey("DriverId");
                        });

                    b.Navigation("CNH")
                        .IsRequired();

                    b.Navigation("CNPJ")
                        .IsRequired();
                });

            modelBuilder.Entity("MotorcycleRental.Domain.Entities.Motorcycle", b =>
                {
                    b.OwnsOne("MotorcycleRental.Domain.ValueObjects.Plate", "Plate", b1 =>
                        {
                            b1.Property<Guid>("MotorcycleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("Plate");

                            b1.HasKey("MotorcycleId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_Motorcycles_Plate");

                            b1.ToTable("Motorcycles");

                            b1.WithOwner()
                                .HasForeignKey("MotorcycleId");
                        });

                    b.Navigation("Plate")
                        .IsRequired();
                });

            modelBuilder.Entity("MotorcycleRental.Domain.Entities.Rental", b =>
                {
                    b.HasOne("MotorcycleRental.Domain.Entities.Driver", "Driver")
                        .WithMany("Rentals")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MotorcycleRental.Domain.Entities.Motorcycle", "Motorcycle")
                        .WithMany("Rentals")
                        .HasForeignKey("MotorcycleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("MotorcycleRental.Domain.ValueObjects.RentalPeriod", "Period", b1 =>
                        {
                            b1.Property<Guid>("RentalId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("date")
                                .HasColumnName("EndDate");

                            b1.Property<DateTime>("ExpectedEndDate")
                                .HasColumnType("date")
                                .HasColumnName("ExpectedEndDate");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("date")
                                .HasColumnName("StartDate");

                            b1.HasKey("RentalId");

                            b1.ToTable("Rentals");

                            b1.WithOwner()
                                .HasForeignKey("RentalId");
                        });

                    b.Navigation("Driver");

                    b.Navigation("Motorcycle");

                    b.Navigation("Period")
                        .IsRequired();
                });

            modelBuilder.Entity("MotorcycleRental.Domain.Entities.Driver", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("MotorcycleRental.Domain.Entities.Motorcycle", b =>
                {
                    b.Navigation("Rentals");
                });
#pragma warning restore 612, 618
        }
    }
}
